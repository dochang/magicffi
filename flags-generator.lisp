(in-package :magicffi)

(defun generate-flags (out in)
  "Internal for the author to generate the grovel file. Params are
output stream and input stream.

Usage:

    (let ((outfile (asdf:system-relative-pathname :magicffi "grovel.lisp")))
      (with-open-file (in "/usr/include/magic.h" :direction :input)
        (with-open-file (out outfile :direction :output :if-exists :overwrite)
          (magicffi::generate-flags out in))))

"
  (labels ((%read-rest ()
             (loop :for line := (read-line in nil)
                   :while line
                   :collect (cl-ppcre:regex-replace "\\s+\\*\\s*" line "")
                   :until (cl-ppcre:scan ".*\\*/" line)))
           (%read-line ()
             (let ((line (read-line in nil)))
               (cond ((not line) nil)
                     ((not (cl-ppcre:scan "#define" line)) :skip)
                     ((cl-ppcre:scan "_MAGIC_H" line) :skip)
                     ((cl-ppcre:scan "/\\*.*\\*/" line) line)
                     ((cl-ppcre:scan "/\\*.*" line)
                      ;; join lines
                      (format nil "~a~{ ~a~}" line (%read-rest)))
                     (t line))))
           (%scan-to-strings (regex string)
             (nth-value 1 (cl-ppcre:scan-to-strings regex string)))
           (%extract-doc (cmt)
             (let* ((regex "/\\*\\s*(.*\\S)\\s*\\*/")
                    (regs (%scan-to-strings regex cmt)))
               (and regs (aref regs 0))))
           (%get-lines ()
             (loop :for line := (%read-line)
                   :while line
                   :unless (eql line :skip)
                     :collect (let* ((regs (%scan-to-strings "^\\s*#define\\s+(\\S+)\\s(.*)$" line))
                                     (name (aref regs 0))
                                     (cmt (aref regs 1))
                                     (doc (and cmt (%extract-doc cmt))))
                                (list name doc))))
           (%const-name (name)
             (format nil "+~A+" (substitute #\- #\_ name)))
           (%bit-name (name)
             (format nil "~A" (subseq (substitute #\- #\_ name) 6)))
           (%name (line) (first line))
           (%doc (line) (second line))
           (%process-line (line)
             (let* ((name (%name line))
                    (const-name (%const-name name))
                    (const-symbol (intern const-name :magicffi))
                    (bit-name (%bit-name name))
                    (bit-keyword (intern bit-name :keyword))
                    (doc (%doc line)))
               (export const-symbol :magicffi)
               (cons `(constant (,const-symbol ,name) :documentation ,doc)
                     `((,bit-keyword ,name) :documentation ,doc))))
           (%get-content ()
             (let* ((lines (%get-lines))
                    (process-result (mapcar #'%process-line lines))
                    (constants (mapcar 'car process-result))
                    (bitfields (mapcar 'cdr process-result)))
               `((progn ,@constants)
                 (bitfield magic-flags ,@bitfields)))))
    (format out "(cl:in-package :magicffi)~2%")
    (format out "(include-or \"/usr/include/magic.h\"~%")
    (format out "            \"/usr/local/include/magic.h\")~%")
    (let* ((content (%get-content))
           (*print-case* :downcase)
           (*package* (find-package :magicffi)))
      (dolist (i content)
        (pprint i out)
        (fresh-line out)))))
